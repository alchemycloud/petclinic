PetClinic project[
    url www.petclinic.com
    namespace co.aleksa
    version 1 . 0 . 0 . 0
    environments prod
    developer azrnic
](

    administration server[
        owners(azrnic)
        template springboot(tests fabut)
        security(
            principal User
            role UserRole
            defaultRole NONE
            type email
            signIn[
                response dto(
                    User.email
                    User.role
                    User.firstName
                    User.lastName
                    tenants list dto(
                        Tenant.identifier
                        Tenant.name
                        TenantUser.accessLevel
                    )
                )
                query User.findById
            ]
            adminRole OWNER
        )
        path /admin
        default model type mysql
        mail support@DslUrl(DslWebUrlValue(www.petclinic.com),Right(SpecFile(/Users/fistulator/alchemy/petclinic,petclinic.sifu,PetClinic project[
    url www.petclinic.com
    namespace co.aleksa
    version 1 . 0 . 0 . 0
    environments(prod)
    developer(azrnic)
](
    administration server[
        owners(azrnic)
        template springboot(tests fabut)
        security(
            principal User
            role UserRole
            defaultRole NONE
            type email
            signIn[
                response dto(
                    User.email
                    User.role
                    User.firstName
                    User.lastName
                    tenants list dto(
                        Tenant.identifier
                        Tenant.name
                        TenantUser.accessLevel
                    )
                )
            ]
        )
        path /admin
    ](
        UserRole enum(
            NONE
            SUPER_ADMIN
            ADMIN
            VET
            OWNER
        )

        User model[auditable](
            firstName text[min 1, max 40, searchable]
            lastName text[min 1, max 60]
            birthday date
            active boolean
            userTenants list TenantUser[oneToMany user]
        )

        Tenant model(
            name text
            identifier text[unique]
            tenantUsers list TenantUser[oneToMany tenant]
        )

        TenantAccessLevel enum(
            ADMIN
            VET
            OWNER
        )

        TenantUser model[unique(user, tenant)](
            user User
            tenant Tenant
            accessLevel TenantAccessLevel
        )

        TenantApi api[secured SUPER_ADMIN, rest /tenants](

            createTenant create[
                model Tenant
                request dto(
                    Tenant.identifier
                    Tenant.name
                )
                response dto(
                    Tenant.identifier
                )
            ]

            updateTenant update[
                model Tenant
                request dto(
                    Tenant.name
                )
            ]

            readTenant read[
                select from Tenant where Tenant.identifier == identifier
            ]

            searchTenants read[
                select from Tenant where optional Tenant.name like name
            ]
        )

        UserApi api[secured ADMIN, rest /users](

            user crud[model User]

            nonAdmins read[
                select from User where User.role != ADMIN
                rest
            ]

            admins read[
                select from User where User.role == ADMIN
                rest
            ]

            activateUser update[
                model User
                request UserActivationDTO
                rest /activate
            ]

            getActiveUser read[
                select from User where User.active == true and User.id == userId
                rest /active/:userId
            ]

            createUserOnTenant create[
                model TenantUser
                request dto(
                    tenant Tenant.identifier
                    User.email
                    User.role
                )
            ]

            removeUserFromTenant update[
                request dto(
                    TenantUser.id
                )
            ]

            UserActivationDTO dto(
                User.id
                User.active[default true]
            )
        )
    )

    backend server[
        owners(azrnic)
        template springboot(tests fabut)
        security(
            principal User
        )
        path /pet-clinic
        file storage fs
        multitenancy
    ](
        PetType enum(
            DOG
            CAT
            BIRD
            FISH
            OTHER
        )

        User model[auditable](
            firstName text[min 1, max 40, searchable]
            lastName text[min 1, max 60]
            email text[email]
            birthday date
            active boolean
            vets list Vet[oneToMany Vet]
        )

        Vet model(
            user User[oneToOne, unique]
            specialties list VetSpecialty[manyToMany]
            image file
        )

        Owner model(
            user User[oneToOne, unique]
            address optional text[min 5, max 100]
            city optional text[min 2, max 50]
            telephone optional text[min 5, max 15]
            pets list Pet[oneToMany owner]
        )

        Pet model[auditable](
            owner Owner
            name text[min 2, max 40]
            birthday date
            petType PetType
            vaccinated boolean
        )

        VetSpecialty model(
            name text[unique, min 3, max 50]
            description text[min 1, max 1024]
            vets list Vet[manyToMany]
        )

        Visit model(
            vet Vet
            pet Pet
            visitNumber integer
            timestamp datetime
            petWeight optional decimal
            description optional text[max 1024]
            scheduled boolean[default false]
        )

        OwnerApi api[secured VET, rest /owners](
            owners crud[model Owner]

            allOwners read[
                paged
                select from Owner
            ]

            forAddress read[
                paged
                select from Owner
                    join User on Owner.user
                    where optional Owner.address like address
                response list EnrichedOwnerDTO
            ]

            ownersWithPets read[
                select from Owner
                    join Pet as pet with Owner on Owner.pets
                    join User on Owner.user
                response list EnrichedOwnerDTO
            ]

            ownersPets read[
                select from Owner
                    join Pet with Owner on Owner.pets
                    where Owner.id == ownerId
                response list dto(
                    Pet.id
                    ownerId Owner.id
                    Pet.name
                )
                rest /:ownerId/pets
            ]

            myPets read[
                select from Owner as owner
                    join Pet with owner on owner.pets
                    join User with owner on owner.user
                    where owner.user == principal
                secured OWNER
                response list dto(
                    Pet.id
                    Pet.name
                    Pet.birthday
                    Pet.petType
                    Pet.vaccinated
                )
            ]

            ownerVets read[
                select from Owner
                    join User on Owner.user
                    where User.role == VET
            ]

            EnrichedOwnerDTO dto(
                Owner.id
                User.email
                User.firstName
                User.lastName
            )
        )

        VetApi api[secured ADMIN, rest /vets](
            vet crud[model Vet]

            vetsWithSpecialties read[
                select (vet, list VetSpecialty) from Vet as vet
                    join User on vet.user
                    join VetSpecialty with vet on vet.specialties
                    group by vet
                response list VetWithSpecialtiesDTO
            ]

            vetInfo read[
                select (vet, list VetSpecialty) from Vet as vet
                    join User on vet.user
                    join VetSpecialty with vet on vet.specialties
                    where vet.id == id
                    group by vet
                response list VetWithSpecialtiesDTO
                rest /vet/info/:id
            ]

            VetWithSpecialtiesDTO dto(
                User.firstName
                User.lastName
                specialties list VetSpecialty.name
            )
        )

        PetApi api[secured VET, rest /pets](
            pet crud[model Pet]

            pets read[
                paged
                select from Pet
                    join Owner on Pet.owner
                    join User on Owner.user
                response list dto(
                    Pet.id
                    Pet.name
                    Pet.petType
                    ownerLastName User.lastName
                )
            ]

            petsByType read[
                select from Pet
                    where Pet.petType == petType
                response list dto(
                    Pet.id
                    Pet.name
                )
            ]
        )

        VisitApi api[secured VET, rest /visits](
            visit crud[model Visit]

            visitsByVet read[
                paged
                select from Visit
                    join Vet on Visit.vet
                    join Pet on Visit.pet
                    where Vet.id == vetId
                response list VisitDTO
            ]

            visitsByPet read[
                paged
                select from Visit
                    join Pet as pet on Visit.pet
                    join Vet on Visit.vet
                    join Owner as owner on pet.owner
                    join User on owner.user
                    where pet.id == petId
                response list VisitDTO
            ]

            scheduledVisits read[
                paged
                select from Visit
                    join Pet as pet on Visit.pet
                    join Vet on Visit.vet
                    join Owner on pet.owner
                    join User on Owner.user
                    where Vet.user == principal and Visit.scheduled == true
                response list VisitDTO
            ]

            visitsForOwner read[
                paged
                secured OWNER
                select from Visit
                    join Pet as pet on Visit.pet
                    join Vet as vet on Visit.vet
                    join User on vet.user
                    join Owner on pet.owner
                    where Owner.user == principal
                response list VisitDTO
            ]

            VisitDTO dto(
                Visit.visitNumber
                Visit.description
                Visit.scheduled
                Pet.name
                Pet.petType
                User.firstName
                User.lastName
            )
        )
    )
))))
        connectedTo
    ](

        AuthenticationApi api(

            SignInResponse dto(
                accessToken text[min 64, max 4096, sensitive]
                refreshToken text[min 64, max 4096, sensitive]
                tokens list AuthenticationApi.SignInResponseTokens
                email text[min 6, max 128, email]
                role UserRole
                firstName text[min 1, max 40]
                lastName text[min 1, max 60]
                tenants list AuthenticationApi.SignInResponseTenants
            )

            SignInResponseTokens dto(
                tenant text[max 255]
                accessToken text[min 64, max 4096, sensitive]
                refreshToken text[min 64, max 4096, sensitive]
            )

            SignInResponseTenants dto(
                identifier text[max 255]
                name text[max 255]
                accessLevel TenantAccessLevel
            )

            refreshToken refreshtoken[
                request AuthenticationApi.RefreshTokenRequest
                post /refresh-token
                query User.findById
                response AuthenticationApi.SignInResponse
                errors
                test refreshToken
                model User
            ]

            signIn emailsignin[
                post /sign-in
                model User
                request AuthenticationApi.SignInRequest
                query User.findById
                response AuthenticationApi.SignInResponse
                errors
                test signIn
            ]

            signUp emailsignup[
                post /sign-up
                model User
                request AuthenticationApi.SignUpRequest
                errors
                test signUp
            ]

            forgotPassword forgotpassword[
                post /forgot-password
                model User
                request AuthenticationApi.ForgotPasswordRequest
                errors
                test forgotPassword
            ]

            resetPassword resetpassword[
                post /reset-password
                model User
                request AuthenticationApi.ResetPasswordRequest
                errors
                test resetPassword
            ]

            verifyEmail verifyemail[
                post /verify-email
                model User
                request AuthenticationApi.VerifyEmailRequest
                errors
                test verifyEmail
            ]

            changePassword changepassword[
                request AuthenticationApi.ChangePasswordRequest
                secured
                post /change-password
                model User
                errors
                test changePassword
            ]

            RefreshTokenRequest dto(
                refreshToken text[min 64, max 4096, sensitive]
            )

            SignInRequest dto(
                email text[min 6, max 128, email]
                password text[min 12, max 128, sensitive]
            )

            SignUpRequest dto(
                firstName text[min 1, max 40]
                lastName text[min 1, max 60]
                birthday date
                active boolean
                email text[min 6, max 128, email]
                password text[min 12, max 128, regex "^(?=.*\\d)(?=.*[A-Z])(?=.*[a-z])(?=.*[^\\w\\d\\s:])([^\\s]){12,128}$", sensitive]
            )

            ForgotPasswordRequest dto(
                email text[min 6, max 128, email]
            )

            ResetPasswordRequest dto(
                resetPasswordCode text[min 64, max 64, sensitive]
                newPassword text[min 12, max 128, regex "^(?=.*\\d)(?=.*[A-Z])(?=.*[a-z])(?=.*[^\\w\\d\\s:])([^\\s]){12,128}$", sensitive]
            )

            VerifyEmailRequest dto(
                emailVerificationCode text[min 64, max 64, sensitive]
            )

            ChangePasswordRequest dto(
                oldPassword text[min 12, max 128, sensitive]
                newPassword text[min 12, max 128, regex "^(?=.*\\d)(?=.*[A-Z])(?=.*[a-z])(?=.*[^\\w\\d\\s:])([^\\s]){12,128}$", sensitive]
            )
        )

        UserRole enum(
            NONE NONE
            SUPER_ADMIN SUPER_ADMIN
            ADMIN ADMIN
            VET VET
            OWNER OWNER
        )

        User model[auditable, type mysql, unique(email), unique(emailVerificationCode), unique(resetPasswordCode)](
            id integer[primarykey, max 9223372036854775807]
            firstName text[min 1, max 40, searchable, auditable]
            lastName text[min 1, max 60, auditable]
            birthday date[auditable]
            active boolean[auditable]
            userTenants list TenantUser[oneToMany user, auditable]
            role UserRole[auditable]
            email text[unique, min 6, max 128, email, auditable]
            passwordHash text[min 6, max 128, sensitive, auditable]
            emailVerificationCode optional text[unique, min 64, max 64, sensitive, auditable]
            emailVerificationCodeTimestamp optional datetime[auditable]
            emailVerified boolean[default false, auditable]
            resetPasswordCode optional text[unique, min 64, max 64, sensitive, auditable]
            resetPasswordCodeTimestamp optional datetime[auditable]
            histories list UserHistory[oneToMany reference]
            lastHistory optional UserHistory[manyToOne lastHistory]
            findAll select(User) from User as User
                 order by User.id asc
            countAll count
                 from User as User
            findById select(User) from User as User
                 where User.id == id
                 order by User.id asc
            deleteById delete
                 from User as User
                 where User.id == id
            findByFirstName select(User) from User as User
                 where User.firstName == firstName
                 order by User.id asc
            findByLastName select(User) from User as User
                 where User.lastName == lastName
                 order by User.id asc
            findByBirthday select(User) from User as User
                 where User.birthday == birthday
                 order by User.id asc
            findByActive select(User) from User as User
                 where User.active == active
                 order by User.id asc
            findByRole select(User) from User as User
                 where User.role == role
                 order by User.id asc
            findByEmail select(User) from User as User
                 where User.email == email
                 order by User.id asc
            findByPasswordHash select(User) from User as User
                 where User.passwordHash == passwordHash
                 order by User.id asc
            findByEmailVerificationCode select(User) from User as User
                 where User.emailVerificationCode == emailVerificationCode
                 order by User.id asc
            findByEmailVerificationCodeMandatory select(User) from User as User
                 where mandatory User.emailVerificationCode == emailVerificationCode
                 order by User.id asc
            findByEmailVerificationCodeTimestamp select(User) from User as User
                 where User.emailVerificationCodeTimestamp == emailVerificationCodeTimestamp
                 order by User.id asc
            findByEmailVerificationCodeTimestampMandatory select(User) from User as User
                 where mandatory User.emailVerificationCodeTimestamp == emailVerificationCodeTimestamp
                 order by User.id asc
            findByEmailVerified select(User) from User as User
                 where User.emailVerified == emailVerified
                 order by User.id asc
            findByResetPasswordCode select(User) from User as User
                 where User.resetPasswordCode == resetPasswordCode
                 order by User.id asc
            findByResetPasswordCodeMandatory select(User) from User as User
                 where mandatory User.resetPasswordCode == resetPasswordCode
                 order by User.id asc
            findByResetPasswordCodeTimestamp select(User) from User as User
                 where User.resetPasswordCodeTimestamp == resetPasswordCodeTimestamp
                 order by User.id asc
            findByResetPasswordCodeTimestampMandatory select(User) from User as User
                 where mandatory User.resetPasswordCodeTimestamp == resetPasswordCodeTimestamp
                 order by User.id asc
            nonAdmins select(User) from User as User
                 where User.role != administration.UserRole.ADMIN
                 order by User.id asc
            admins select(User) from User as User
                 where User.role == administration.UserRole.ADMIN
                 order by User.id asc
            getActiveUser select(User) from User as User
                 where User.active == true and User.id == userId
                 order by User.id asc
        )

        Tenant model[type mysql, unique(identifier)](
            id integer[primarykey, max 9223372036854775807]
            name text[max 255]
            identifier text[unique, max 255]
            tenantUsers list TenantUser[oneToMany tenant]
            findAll select(Tenant) from Tenant as Tenant
                 order by Tenant.id asc
            countAll count
                 from Tenant as Tenant
            findById select(Tenant) from Tenant as Tenant
                 where Tenant.id == id
                 order by Tenant.id asc
            deleteById delete
                 from Tenant as Tenant
                 where Tenant.id == id
            findByName select(Tenant) from Tenant as Tenant
                 where Tenant.name == name
                 order by Tenant.id asc
            findByIdentifier select(Tenant) from Tenant as Tenant
                 where Tenant.identifier == identifier
                 order by Tenant.id asc
            readTenant select(Tenant) from Tenant as Tenant
                 where Tenant.identifier == identifier
                 order by Tenant.id asc
            searchTenants select(Tenant) from Tenant as Tenant
                 where optional Tenant.name like name
                 order by Tenant.id asc
        )

        TenantAccessLevel enum(
            ADMIN ADMIN
            VET VET
            OWNER OWNER
        )

        TenantUser model[unique(user, tenant), type mysql, index(accessLevel)](
            id integer[primarykey, max 9223372036854775807]
            user User[manyToOne tenantUser]
            tenant Tenant[manyToOne tenantUser]
            accessLevel TenantAccessLevel[indexed]
            findAll select(TenantUser) from TenantUser as TenantUser
                 order by TenantUser.id asc
            countAll count
                 from TenantUser as TenantUser
            findById select(TenantUser) from TenantUser as TenantUser
                 where TenantUser.id == id
                 order by TenantUser.id asc
            deleteById delete
                 from TenantUser as TenantUser
                 where TenantUser.id == id
            findByAccessLevel select(TenantUser) from TenantUser as TenantUser
                 where TenantUser.accessLevel == accessLevel
                 order by TenantUser.id asc
            findByUserIdAndTenantId select(TenantUser) from TenantUser as TenantUser
                 where TenantUser.user.id == userId and TenantUser.tenant.id == tenantId
                 order by TenantUser.id asc
        )

        TenantApi api[secured SUPER_ADMIN, rest /tenants](

            createTenant create[
                model Tenant
                request TenantApi.CreateTenantRequest
                response TenantApi.CreateTenantResponse
                secured SUPER_ADMIN
                errors
                test createTenant
                post /tenants/create-tenant
            ]

            updateTenant update[
                model Tenant
                request TenantApi.UpdateTenantRequest
                secured SUPER_ADMIN
                errors
                test updateTenant
                put /tenants/update-tenant
            ]

            readTenant read[
                query Tenant.readTenant
                secured SUPER_ADMIN
                errors
                test readTenant
                model Tenant
                request TenantApi.ReadTenantRequest
                response TenantApi.ReadTenantResponse
                get /tenants/read-tenant
            ]

            searchTenants read[
                query Tenant.searchTenants
                secured SUPER_ADMIN
                errors
                test searchTenants
                model Tenant
                request TenantApi.SearchTenantsRequest
                response list TenantApi.SearchTenantsResponse
                get /tenants/search-tenants
            ]

            CreateTenantRequest dto(
                identifier text[max 255]
                name text[max 255]
            )

            CreateTenantResponse dto(
                identifier text[max 255]
            )

            UpdateTenantRequest dto(
                name text[max 255]
            )

            ReadTenantRequest dto(
                identifier text[max 255]
            )

            ReadTenantResponse dto(
                id integer[max 9223372036854775807]
                name text[max 255]
                identifier text[max 255]
            )

            SearchTenantsRequest dto(
                name optional text[max 255]
            )

            SearchTenantsResponse dto(
                id integer[max 9223372036854775807]
                name text[max 255]
                identifier text[max 255]
            )
        )

        UserApi api[secured ADMIN, rest /users](

            readUser read[
                secured ADMIN
                model User
                query User.findById
                errors
                test readUser
                request UserApi.ReadUserRequest
                response UserApi.ReadUserResponse
                get /users/read-user
            ]

            createUser create[
                secured ADMIN
                model User
                query User.findById
                errors
                test createUser
                request UserApi.CreateUserRequest
                response UserApi.CreateUserResponse
                post /users/create-user
            ]

            updateUser update[
                secured ADMIN
                model User
                query User.findById
                errors
                test updateUser
                request UserApi.UpdateUserRequest
                response UserApi.UpdateUserResponse
                put /users/update-user
            ]

            deleteUser delete[
                secured ADMIN
                query User.findById
                errors
                test deleteUser
                model User
                request UserApi.DeleteUserRequest
                delete /users/delete-user
            ]

            nonAdmins read[
                query User.nonAdmins
                get /users/non-admins
                secured ADMIN
                errors
                test nonAdmins
                model User
                response list UserApi.NonAdminsResponse
            ]

            admins read[
                query User.admins
                get /users/admins
                secured ADMIN
                errors
                test admins
                model User
                response list UserApi.AdminsResponse
            ]

            activateUser update[
                model User
                request UserActivationDTO
                put /users/activate
                secured ADMIN
                errors
                test activateUser
            ]

            getActiveUser read[
                query User.getActiveUser
                get /users/active/:userId
                secured ADMIN
                errors
                test getActiveUser
                model User
                request UserApi.GetActiveUserRequest
                response UserApi.GetActiveUserResponse
            ]

            createUserOnTenant create[
                model TenantUser
                request UserApi.CreateUserOnTenantRequest
                secured ADMIN
                errors
                test createUserOnTenant
                post /users/create-user-on-tenant
            ]

            removeUserFromTenant update[
                request UserApi.RemoveUserFromTenantRequest
                secured ADMIN
                errors
                test removeUserFromTenant
                put /users/remove-user-from-tenant
            ]

            UserActivationDTO dto(
                id integer[max 9223372036854775807]
                active boolean
            )

            ReadUserRequest dto(
                id integer[max 9223372036854775807]
            )

            ReadUserResponse dto(
                id integer[max 9223372036854775807]
                firstName text[min 1, max 40]
                lastName text[min 1, max 60]
                birthday date
                active boolean
                role UserRole
                email text[min 6, max 128, email]
                passwordHash text[min 6, max 128, sensitive]
                emailVerificationCode optional text[min 64, max 64, sensitive]
                emailVerificationCodeTimestamp optional datetime
                emailVerified boolean
                resetPasswordCode optional text[min 64, max 64, sensitive]
                resetPasswordCodeTimestamp optional datetime
            )

            CreateUserRequest dto(
                firstName text[min 1, max 40]
                lastName text[min 1, max 60]
                birthday date
                active boolean
                role UserRole
                email text[min 6, max 128, email]
                passwordHash text[min 6, max 128, sensitive]
                emailVerificationCode optional text[min 64, max 64, sensitive]
                emailVerificationCodeTimestamp optional datetime
                emailVerified boolean
                resetPasswordCode optional text[min 64, max 64, sensitive]
                resetPasswordCodeTimestamp optional datetime
            )

            CreateUserResponse dto(
                id integer[max 9223372036854775807]
                firstName text[min 1, max 40]
                lastName text[min 1, max 60]
                birthday date
                active boolean
                role UserRole
                email text[min 6, max 128, email]
                passwordHash text[min 6, max 128, sensitive]
                emailVerificationCode optional text[min 64, max 64, sensitive]
                emailVerificationCodeTimestamp optional datetime
                emailVerified boolean
                resetPasswordCode optional text[min 64, max 64, sensitive]
                resetPasswordCodeTimestamp optional datetime
            )

            UpdateUserRequest dto(
                id integer[max 9223372036854775807]
                firstName text[min 1, max 40]
                lastName text[min 1, max 60]
                birthday date
                active boolean
                role UserRole
                email text[min 6, max 128, email]
                passwordHash text[min 6, max 128, sensitive]
                emailVerificationCode optional text[min 64, max 64, sensitive]
                emailVerificationCodeTimestamp optional datetime
                emailVerified boolean
                resetPasswordCode optional text[min 64, max 64, sensitive]
                resetPasswordCodeTimestamp optional datetime
            )

            UpdateUserResponse dto(
                id integer[max 9223372036854775807]
                firstName text[min 1, max 40]
                lastName text[min 1, max 60]
                birthday date
                active boolean
                role UserRole
                email text[min 6, max 128, email]
                passwordHash text[min 6, max 128, sensitive]
                emailVerificationCode optional text[min 64, max 64, sensitive]
                emailVerificationCodeTimestamp optional datetime
                emailVerified boolean
                resetPasswordCode optional text[min 64, max 64, sensitive]
                resetPasswordCodeTimestamp optional datetime
            )

            DeleteUserRequest dto(
                id integer[max 9223372036854775807]
            )

            NonAdminsResponse dto(
                id integer[max 9223372036854775807]
                firstName text[min 1, max 40]
                lastName text[min 1, max 60]
                birthday date
                active boolean
                role UserRole
                email text[min 6, max 128, email]
                passwordHash text[min 6, max 128, sensitive]
                emailVerificationCode optional text[min 64, max 64, sensitive]
                emailVerificationCodeTimestamp optional datetime
                emailVerified boolean
                resetPasswordCode optional text[min 64, max 64, sensitive]
                resetPasswordCodeTimestamp optional datetime
            )

            AdminsResponse dto(
                id integer[max 9223372036854775807]
                firstName text[min 1, max 40]
                lastName text[min 1, max 60]
                birthday date
                active boolean
                role UserRole
                email text[min 6, max 128, email]
                passwordHash text[min 6, max 128, sensitive]
                emailVerificationCode optional text[min 64, max 64, sensitive]
                emailVerificationCodeTimestamp optional datetime
                emailVerified boolean
                resetPasswordCode optional text[min 64, max 64, sensitive]
                resetPasswordCodeTimestamp optional datetime
            )

            GetActiveUserRequest dto(
                userId integer[max 9223372036854775807]
            )

            GetActiveUserResponse dto(
                id integer[max 9223372036854775807]
                firstName text[min 1, max 40]
                lastName text[min 1, max 60]
                birthday date
                active boolean
                role UserRole
                email text[min 6, max 128, email]
                passwordHash text[min 6, max 128, sensitive]
                emailVerificationCode optional text[min 64, max 64, sensitive]
                emailVerificationCodeTimestamp optional datetime
                emailVerified boolean
                resetPasswordCode optional text[min 64, max 64, sensitive]
                resetPasswordCodeTimestamp optional datetime
            )

            CreateUserOnTenantRequest dto(
                tenant text[max 255]
                email text[min 6, max 128, email]
                role UserRole
            )

            RemoveUserFromTenantRequest dto(
                id integer[max 9223372036854775807]
            )
        )

        accessTokenValidityInSeconds integer[production 300, test 300]

        refreshTokenValidityInSeconds integer[production 3600, test 3600]

        accessTokenIsExpired unauthorized

        refreshTokenIsExpired unauthorized

        insufficientRights unauthorized

        credentialsAreInvalid badRequest

        emailAlreadyInUser badRequest

        emailNotVerified badRequest

        resetPasswordCodeIsExpired badRequest

        emailVerificationCodeIsExpired badRequest

        invalidResetPasswordCode badRequest

        invalidEmailVerificationCodeError badRequest

        nonexistentEmail badRequest

        DataVersion model[type mysql](
            id integer[primarykey, max 9223372036854775807]
            major integer[min 0]
            minor integer[min 0]
            revision integer[min 0]
            number integer[min 0]
            time datetime
            lock boolean
            lockTime datetime
            findAll select(DataVersion) from DataVersion as DataVersion
                 order by DataVersion.id asc
            countAll count
                 from DataVersion as DataVersion
            findById select(DataVersion) from DataVersion as DataVersion
                 where DataVersion.id == id
                 order by DataVersion.id asc
            deleteById delete
                 from DataVersion as DataVersion
                 where DataVersion.id == id
            findByMajor select(DataVersion) from DataVersion as DataVersion
                 where DataVersion.major == major
                 order by DataVersion.id asc
            findByMinor select(DataVersion) from DataVersion as DataVersion
                 where DataVersion.minor == minor
                 order by DataVersion.id asc
            findByRevision select(DataVersion) from DataVersion as DataVersion
                 where DataVersion.revision == revision
                 order by DataVersion.id asc
            findByNumber select(DataVersion) from DataVersion as DataVersion
                 where DataVersion.number == number
                 order by DataVersion.id asc
            findByTime select(DataVersion) from DataVersion as DataVersion
                 where DataVersion.time == time
                 order by DataVersion.id asc
            findByLock select(DataVersion) from DataVersion as DataVersion
                 where DataVersion.lock == lock
                 order by DataVersion.id asc
            findByLockTime select(DataVersion) from DataVersion as DataVersion
                 where DataVersion.lockTime == lockTime
                 order by DataVersion.id asc
        )

        DataProcessorLog model[unique(major, minor, revision, number), type mysql](
            id integer[primarykey, max 9223372036854775807]
            major integer[min 0]
            minor integer[min 0]
            revision integer[min 0]
            number integer[min 0]
            description text[min 0, max 255]
            started datetime
            completed optional datetime
            findAll select(DataProcessorLog) from DataProcessorLog as DataProcessorLog
                 order by DataProcessorLog.id asc
            countAll count
                 from DataProcessorLog as DataProcessorLog
            findById select(DataProcessorLog) from DataProcessorLog as DataProcessorLog
                 where DataProcessorLog.id == id
                 order by DataProcessorLog.id asc
            deleteById delete
                 from DataProcessorLog as DataProcessorLog
                 where DataProcessorLog.id == id
            findByMajor select(DataProcessorLog) from DataProcessorLog as DataProcessorLog
                 where DataProcessorLog.major == major
                 order by DataProcessorLog.id asc
            findByMinor select(DataProcessorLog) from DataProcessorLog as DataProcessorLog
                 where DataProcessorLog.minor == minor
                 order by DataProcessorLog.id asc
            findByRevision select(DataProcessorLog) from DataProcessorLog as DataProcessorLog
                 where DataProcessorLog.revision == revision
                 order by DataProcessorLog.id asc
            findByNumber select(DataProcessorLog) from DataProcessorLog as DataProcessorLog
                 where DataProcessorLog.number == number
                 order by DataProcessorLog.id asc
            findByDescription select(DataProcessorLog) from DataProcessorLog as DataProcessorLog
                 where DataProcessorLog.description == description
                 order by DataProcessorLog.id asc
            findByStarted select(DataProcessorLog) from DataProcessorLog as DataProcessorLog
                 where DataProcessorLog.started == started
                 order by DataProcessorLog.id asc
            findByCompleted select(DataProcessorLog) from DataProcessorLog as DataProcessorLog
                 where DataProcessorLog.completed == completed
                 order by DataProcessorLog.id asc
            findByCompletedMandatory select(DataProcessorLog) from DataProcessorLog as DataProcessorLog
                 where mandatory DataProcessorLog.completed == completed
                 order by DataProcessorLog.id asc
            findByMajorAndMinorAndRevisionAndNumber select(DataProcessorLog) from DataProcessorLog as DataProcessorLog
                 where DataProcessorLog.major == major and DataProcessorLog.minor == minor and DataProcessorLog.revision == revision and DataProcessorLog.number == number
                 order by DataProcessorLog.id asc
        )

        UserHistory model[type mysql](
            id integer[primarykey, max 9223372036854775807]
            correlationId optional text[max 255]
            entityId integer[max 9223372036854775807]
            reference optional User[manyToOne userHistory]
            changeTime datetime
            previous optional UserHistory[manyToOne userHistory]
            firstName optional text[min 1, max 40]
            lastName optional text[min 1, max 60]
            birthday optional date
            active optional boolean
            role optional UserRole
            email optional text[min 6, max 128, email]
            passwordHash optional text[min 6, max 128, sensitive]
            emailVerificationCode optional text[min 64, max 64, sensitive]
            emailVerificationCodeTimestamp optional datetime
            emailVerified optional boolean
            resetPasswordCode optional text[min 64, max 64, sensitive]
            resetPasswordCodeTimestamp optional datetime
            findAllHistoriesOfEntities select(UserHistory) from UserHistory as UserHistory
                 where mandatory UserHistory.reference.id in referenceId
                 order by UserHistory.id asc
            findAll select(UserHistory) from UserHistory as UserHistory
                 order by UserHistory.id asc
            countAll count
                 from UserHistory as UserHistory
            findById select(UserHistory) from UserHistory as UserHistory
                 where UserHistory.id == id
                 order by UserHistory.id asc
            deleteById delete
                 from UserHistory as UserHistory
                 where UserHistory.id == id
            findByCorrelationId select(UserHistory) from UserHistory as UserHistory
                 where UserHistory.correlationId == correlationId
                 order by UserHistory.id asc
            findByCorrelationIdMandatory select(UserHistory) from UserHistory as UserHistory
                 where mandatory UserHistory.correlationId == correlationId
                 order by UserHistory.id asc
            findByEntityId select(UserHistory) from UserHistory as UserHistory
                 where UserHistory.entityId == entityId
                 order by UserHistory.id asc
            findByChangeTime select(UserHistory) from UserHistory as UserHistory
                 where UserHistory.changeTime == changeTime
                 order by UserHistory.id asc
            findByFirstName select(UserHistory) from UserHistory as UserHistory
                 where UserHistory.firstName == firstName
                 order by UserHistory.id asc
            findByFirstNameMandatory select(UserHistory) from UserHistory as UserHistory
                 where mandatory UserHistory.firstName == firstName
                 order by UserHistory.id asc
            findByLastName select(UserHistory) from UserHistory as UserHistory
                 where UserHistory.lastName == lastName
                 order by UserHistory.id asc
            findByLastNameMandatory select(UserHistory) from UserHistory as UserHistory
                 where mandatory UserHistory.lastName == lastName
                 order by UserHistory.id asc
            findByBirthday select(UserHistory) from UserHistory as UserHistory
                 where UserHistory.birthday == birthday
                 order by UserHistory.id asc
            findByBirthdayMandatory select(UserHistory) from UserHistory as UserHistory
                 where mandatory UserHistory.birthday == birthday
                 order by UserHistory.id asc
            findByActive select(UserHistory) from UserHistory as UserHistory
                 where UserHistory.active == active
                 order by UserHistory.id asc
            findByActiveMandatory select(UserHistory) from UserHistory as UserHistory
                 where mandatory UserHistory.active == active
                 order by UserHistory.id asc
            findByRole select(UserHistory) from UserHistory as UserHistory
                 where UserHistory.role == role
                 order by UserHistory.id asc
            findByRoleMandatory select(UserHistory) from UserHistory as UserHistory
                 where mandatory UserHistory.role == role
                 order by UserHistory.id asc
            findByEmail select(UserHistory) from UserHistory as UserHistory
                 where UserHistory.email == email
                 order by UserHistory.id asc
            findByEmailMandatory select(UserHistory) from UserHistory as UserHistory
                 where mandatory UserHistory.email == email
                 order by UserHistory.id asc
            findByPasswordHash select(UserHistory) from UserHistory as UserHistory
                 where UserHistory.passwordHash == passwordHash
                 order by UserHistory.id asc
            findByPasswordHashMandatory select(UserHistory) from UserHistory as UserHistory
                 where mandatory UserHistory.passwordHash == passwordHash
                 order by UserHistory.id asc
            findByEmailVerificationCode select(UserHistory) from UserHistory as UserHistory
                 where UserHistory.emailVerificationCode == emailVerificationCode
                 order by UserHistory.id asc
            findByEmailVerificationCodeMandatory select(UserHistory) from UserHistory as UserHistory
                 where mandatory UserHistory.emailVerificationCode == emailVerificationCode
                 order by UserHistory.id asc
            findByEmailVerificationCodeTimestamp select(UserHistory) from UserHistory as UserHistory
                 where UserHistory.emailVerificationCodeTimestamp == emailVerificationCodeTimestamp
                 order by UserHistory.id asc
            findByEmailVerificationCodeTimestampMandatory select(UserHistory) from UserHistory as UserHistory
                 where mandatory UserHistory.emailVerificationCodeTimestamp == emailVerificationCodeTimestamp
                 order by UserHistory.id asc
            findByEmailVerified select(UserHistory) from UserHistory as UserHistory
                 where UserHistory.emailVerified == emailVerified
                 order by UserHistory.id asc
            findByEmailVerifiedMandatory select(UserHistory) from UserHistory as UserHistory
                 where mandatory UserHistory.emailVerified == emailVerified
                 order by UserHistory.id asc
            findByResetPasswordCode select(UserHistory) from UserHistory as UserHistory
                 where UserHistory.resetPasswordCode == resetPasswordCode
                 order by UserHistory.id asc
            findByResetPasswordCodeMandatory select(UserHistory) from UserHistory as UserHistory
                 where mandatory UserHistory.resetPasswordCode == resetPasswordCode
                 order by UserHistory.id asc
            findByResetPasswordCodeTimestamp select(UserHistory) from UserHistory as UserHistory
                 where UserHistory.resetPasswordCodeTimestamp == resetPasswordCodeTimestamp
                 order by UserHistory.id asc
            findByResetPasswordCodeTimestampMandatory select(UserHistory) from UserHistory as UserHistory
                 where mandatory UserHistory.resetPasswordCodeTimestamp == resetPasswordCodeTimestamp
                 order by UserHistory.id asc
        )
    )

    backend server[
        owners(azrnic)
        template springboot(tests fabut)
        security(
            principal User
        )
        path /pet-clinic
        file storage fs
        multitenancy
        default model type mysql
        connectedTo
    ](

        PetType enum(
            DOG DOG
            CAT CAT
            BIRD BIRD
            FISH FISH
            OTHER OTHER
        )

        User model[auditable, type mysql](
            id integer[primarykey, max 9223372036854775807]
            firstName text[min 1, max 40, searchable, auditable]
            lastName text[min 1, max 60, auditable]
            email text[email, auditable, max 255]
            birthday date[auditable]
            active boolean[auditable]
            vets list Vet[oneToMany Vet, auditable]
            role UserRole[auditable]
            histories list UserHistory[oneToMany reference]
            lastHistory optional UserHistory[manyToOne lastHistory]
            findAll select(User) from User as User
                 order by User.id asc
            countAll count
                 from User as User
            findById select(User) from User as User
                 where User.id == id
                 order by User.id asc
            deleteById delete
                 from User as User
                 where User.id == id
            findByFirstName select(User) from User as User
                 where User.firstName == firstName
                 order by User.id asc
            findByLastName select(User) from User as User
                 where User.lastName == lastName
                 order by User.id asc
            findByEmail select(User) from User as User
                 where User.email == email
                 order by User.id asc
            findByBirthday select(User) from User as User
                 where User.birthday == birthday
                 order by User.id asc
            findByActive select(User) from User as User
                 where User.active == active
                 order by User.id asc
            findByRole select(User) from User as User
                 where User.role == role
                 order by User.id asc
        )

        Vet model[type mysql, unique(user)](
            id integer[primarykey, max 9223372036854775807]
            user User[oneToOne vet, unique]
            specialties list VetSpecialty[manyToMany VetVetSpecialty]
            image File
            user User[manyToOne vet]
            findAll select(Vet) from Vet as Vet
                 order by Vet.id asc
            countAll count
                 from Vet as Vet
            findById select(Vet) from Vet as Vet
                 where Vet.id == id
                 order by Vet.id asc
            deleteById delete
                 from Vet as Vet
                 where Vet.id == id
            findByImage select(Vet) from Vet as Vet
                 where Vet.image.path == imagePath
                 order by Vet.id asc
            findByUserIdAndUserId select(Vet) from Vet as Vet
                 where ( Vet.user.id == userId and Vet.user.id == userId ) and ( Vet.user.id == userId and Vet.user.id == userId )
                 order by Vet.id asc
            vetsWithSpecialties select(vet, list VetSpecialty) from Vet as vet
                 join User as User with vet on vet.user
                 join VetSpecialty as VetSpecialty with vet on vet.specialties
                 group by vet.id
                 order by Vet.id asc
            vetInfo select(vet, list VetSpecialty) from Vet as vet
                 join User as User with vet on vet.user
                 join VetSpecialty as VetSpecialty with vet on vet.specialties
                 where vet.id == id
                 group by vet.id
                 order by Vet.id asc
        )

        Owner model[type mysql, unique(user)](
            id integer[primarykey, max 9223372036854775807]
            user User[oneToOne owner, unique]
            address optional text[min 5, max 100]
            city optional text[min 2, max 50]
            telephone optional text[min 5, max 15]
            pets list Pet[oneToMany owner]
            findAll select(Owner) from Owner as Owner
                 order by Owner.id asc
            countAll count
                 from Owner as Owner
            findById select(Owner) from Owner as Owner
                 where Owner.id == id
                 order by Owner.id asc
            deleteById delete
                 from Owner as Owner
                 where Owner.id == id
            findByAddress select(Owner) from Owner as Owner
                 where Owner.address == address
                 order by Owner.id asc
            findByAddressMandatory select(Owner) from Owner as Owner
                 where mandatory Owner.address == address
                 order by Owner.id asc
            findByCity select(Owner) from Owner as Owner
                 where Owner.city == city
                 order by Owner.id asc
            findByCityMandatory select(Owner) from Owner as Owner
                 where mandatory Owner.city == city
                 order by Owner.id asc
            findByTelephone select(Owner) from Owner as Owner
                 where Owner.telephone == telephone
                 order by Owner.id asc
            findByTelephoneMandatory select(Owner) from Owner as Owner
                 where mandatory Owner.telephone == telephone
                 order by Owner.id asc
            findByUserId select(Owner) from Owner as Owner
                 where Owner.user.id == userId
                 order by Owner.id asc
            allOwners select(Owner) from Owner as Owner
                 order by Owner.id asc
            findAllOwners select(Owner) from Owner as Owner
                 order by Owner.id asc
                 drop drop
                 take take
            countAllOwners count
                 from Owner as Owner
            forAddress select(Owner, User) from Owner as Owner
                 join User as User with Owner on Owner.user
                 where optional Owner.address like address
                 order by Owner.id asc
            findForAddress select(Owner, User) from Owner as Owner
                 join User as User with Owner on Owner.user
                 where optional Owner.address like address
                 order by Owner.id asc
                 drop drop
                 take take
            countForAddress count
                 from Owner as Owner
                 join User as User with Owner on Owner.user
                 where optional Owner.address like address
            ownersWithPets select(Owner, pet, User) from Owner as Owner
                 join Pet as pet with Owner on Owner.pets
                 join User as User with Owner on Owner.user
                 order by Owner.id asc
            ownersPets select(Owner, Pet) from Owner as Owner
                 join Pet as Pet with Owner on Owner.pets
                 where Owner.id == ownerId
                 order by Owner.id asc
            myPets select(owner, Pet, User) from Owner as owner
                 join Pet as Pet with owner on owner.pets
                 join User as User with owner on owner.user
                 where owner.user.id == principalId
                 order by Owner.id asc
            ownerVets select(Owner, User) from Owner as Owner
                 join User as User with Owner on Owner.user
                 where User.role == backend.UserRole.VET
                 order by Owner.id asc
        )

        Pet model[auditable, type mysql, index(petType)](
            id integer[primarykey, max 9223372036854775807]
            owner Owner[auditable, manyToOne pet]
            name text[min 2, max 40, auditable]
            birthday date[auditable]
            petType PetType[auditable, indexed]
            vaccinated boolean[auditable]
            histories list PetHistory[oneToMany reference]
            lastHistory optional PetHistory[manyToOne lastHistory]
            findAll select(Pet) from Pet as Pet
                 order by Pet.id asc
            countAll count
                 from Pet as Pet
            findById select(Pet) from Pet as Pet
                 where Pet.id == id
                 order by Pet.id asc
            deleteById delete
                 from Pet as Pet
                 where Pet.id == id
            findByName select(Pet) from Pet as Pet
                 where Pet.name == name
                 order by Pet.id asc
            findByBirthday select(Pet) from Pet as Pet
                 where Pet.birthday == birthday
                 order by Pet.id asc
            findByPetType select(Pet) from Pet as Pet
                 where Pet.petType == petType
                 order by Pet.id asc
            findByVaccinated select(Pet) from Pet as Pet
                 where Pet.vaccinated == vaccinated
                 order by Pet.id asc
            pets select(Pet, Owner, User) from Pet as Pet
                 join Owner as Owner with Pet on Pet.owner
                 join User as User with Owner on Owner.user
                 order by Pet.id asc
            findPets select(Pet, Owner, User) from Pet as Pet
                 join Owner as Owner with Pet on Pet.owner
                 join User as User with Owner on Owner.user
                 order by Pet.id asc
                 drop drop
                 take take
            countPets count
                 from Pet as Pet
                 join Owner as Owner with Pet on Pet.owner
                 join User as User with Owner on Owner.user
            petsByType select(Pet) from Pet as Pet
                 where Pet.petType == petType
                 order by Pet.id asc
        )

        VetSpecialty model[type mysql, unique(name)](
            id integer[primarykey, max 9223372036854775807]
            name text[unique, min 3, max 50]
            description text[min 1, max 1024]
            vets list Vet[manyToMany VetSpecialtyVet]
            findAll select(VetSpecialty) from VetSpecialty as VetSpecialty
                 order by VetSpecialty.id asc
            countAll count
                 from VetSpecialty as VetSpecialty
            findById select(VetSpecialty) from VetSpecialty as VetSpecialty
                 where VetSpecialty.id == id
                 order by VetSpecialty.id asc
            deleteById delete
                 from VetSpecialty as VetSpecialty
                 where VetSpecialty.id == id
            findByName select(VetSpecialty) from VetSpecialty as VetSpecialty
                 where VetSpecialty.name == name
                 order by VetSpecialty.id asc
            findByDescription select(VetSpecialty) from VetSpecialty as VetSpecialty
                 where VetSpecialty.description == description
                 order by VetSpecialty.id asc
        )

        Visit model[type mysql](
            id integer[primarykey, max 9223372036854775807]
            vet Vet[manyToOne visit]
            pet Pet[manyToOne visit]
            visitNumber integer
            timestamp datetime
            petWeight optional decimal[precision 24, scale 8]
            description optional text[max 1024]
            scheduled boolean[default false]
            findAll select(Visit) from Visit as Visit
                 order by Visit.id asc
            countAll count
                 from Visit as Visit
            findById select(Visit) from Visit as Visit
                 where Visit.id == id
                 order by Visit.id asc
            deleteById delete
                 from Visit as Visit
                 where Visit.id == id
            findByVisitNumber select(Visit) from Visit as Visit
                 where Visit.visitNumber == visitNumber
                 order by Visit.id asc
            findByTimestamp select(Visit) from Visit as Visit
                 where Visit.timestamp == timestamp
                 order by Visit.id asc
            findByPetWeight select(Visit) from Visit as Visit
                 where Visit.petWeight == petWeight
                 order by Visit.id asc
            findByPetWeightMandatory select(Visit) from Visit as Visit
                 where mandatory Visit.petWeight == petWeight
                 order by Visit.id asc
            findByDescription select(Visit) from Visit as Visit
                 where Visit.description == description
                 order by Visit.id asc
            findByDescriptionMandatory select(Visit) from Visit as Visit
                 where mandatory Visit.description == description
                 order by Visit.id asc
            findByScheduled select(Visit) from Visit as Visit
                 where Visit.scheduled == scheduled
                 order by Visit.id asc
            visitsByVet select(Visit, Vet, Pet) from Visit as Visit
                 join Vet as Vet with Visit on Visit.vet
                 join Pet as Pet with Visit on Visit.pet
                 where Vet.id == vetId
                 order by Visit.id asc
            findVisitsByVet select(Visit, Vet, Pet) from Visit as Visit
                 join Vet as Vet with Visit on Visit.vet
                 join Pet as Pet with Visit on Visit.pet
                 where Vet.id == vetId
                 order by Visit.id asc
                 drop drop
                 take take
            countVisitsByVet count
                 from Visit as Visit
                 join Vet as Vet with Visit on Visit.vet
                 join Pet as Pet with Visit on Visit.pet
                 where Vet.id == vetId
            visitsByPet select(Visit, pet, Vet, owner, User) from Visit as Visit
                 join Pet as pet with Visit on Visit.pet
                 join Vet as Vet with Visit on Visit.vet
                 join Owner as owner with pet on pet.owner
                 join User as User with owner on owner.user
                 where pet.id == petId
                 order by Visit.id asc
            findVisitsByPet select(Visit, pet, Vet, owner, User) from Visit as Visit
                 join Pet as pet with Visit on Visit.pet
                 join Vet as Vet with Visit on Visit.vet
                 join Owner as owner with pet on pet.owner
                 join User as User with owner on owner.user
                 where pet.id == petId
                 order by Visit.id asc
                 drop drop
                 take take
            countVisitsByPet count
                 from Visit as Visit
                 join Pet as pet with Visit on Visit.pet
                 join Vet as Vet with Visit on Visit.vet
                 join Owner as owner with pet on pet.owner
                 join User as User with owner on owner.user
                 where pet.id == petId
            scheduledVisits select(Visit, pet, Vet, Owner, User) from Visit as Visit
                 join Pet as pet with Visit on Visit.pet
                 join Vet as Vet with Visit on Visit.vet
                 join Owner as Owner with pet on pet.owner
                 join User as User with Owner on Owner.user
                 where ( Vet.user.id == principalId and Vet.user.id == principalId ) and Visit.scheduled == true
                 order by Visit.id asc
            findScheduledVisits select(Visit, pet, Vet, Owner, User) from Visit as Visit
                 join Pet as pet with Visit on Visit.pet
                 join Vet as Vet with Visit on Visit.vet
                 join Owner as Owner with pet on pet.owner
                 join User as User with Owner on Owner.user
                 where ( Vet.user.id == principalId and Vet.user.id == principalId ) and Visit.scheduled == true
                 order by Visit.id asc
                 drop drop
                 take take
            countScheduledVisits count
                 from Visit as Visit
                 join Pet as pet with Visit on Visit.pet
                 join Vet as Vet with Visit on Visit.vet
                 join Owner as Owner with pet on pet.owner
                 join User as User with Owner on Owner.user
                 where ( Vet.user.id == principalId and Vet.user.id == principalId ) and Visit.scheduled == true
            visitsForOwner select(Visit, pet, vet, User, Owner) from Visit as Visit
                 join Pet as pet with Visit on Visit.pet
                 join Vet as vet with Visit on Visit.vet
                 join User as User with vet on vet.user
                 join Owner as Owner with pet on pet.owner
                 where Owner.user.id == principalId
                 order by Visit.id asc
            findVisitsForOwner select(Visit, pet, vet, User, Owner) from Visit as Visit
                 join Pet as pet with Visit on Visit.pet
                 join Vet as vet with Visit on Visit.vet
                 join User as User with vet on vet.user
                 join Owner as Owner with pet on pet.owner
                 where Owner.user.id == principalId
                 order by Visit.id asc
                 drop drop
                 take take
            countVisitsForOwner count
                 from Visit as Visit
                 join Pet as pet with Visit on Visit.pet
                 join Vet as vet with Visit on Visit.vet
                 join User as User with vet on vet.user
                 join Owner as Owner with pet on pet.owner
                 where Owner.user.id == principalId
        )

        OwnerApi api[secured VET, rest /owners](

            readOwners read[
                secured VET
                model Owner
                query Owner.findById
                errors
                test readOwners
                request OwnerApi.ReadOwnersRequest
                response OwnerApi.ReadOwnersResponse
                get /owners/read-owners
            ]

            createOwners create[
                secured VET
                model Owner
                query Owner.findById
                errors
                test createOwners
                request OwnerApi.CreateOwnersRequest
                response OwnerApi.CreateOwnersResponse
                post /owners/create-owners
            ]

            updateOwners update[
                secured VET
                model Owner
                query Owner.findById
                errors
                test updateOwners
                request OwnerApi.UpdateOwnersRequest
                response OwnerApi.UpdateOwnersResponse
                put /owners/update-owners
            ]

            deleteOwners delete[
                secured VET
                query Owner.findById
                errors
                test deleteOwners
                model Owner
                request OwnerApi.DeleteOwnersRequest
                delete /owners/delete-owners
            ]

            allOwners read[
                paged
                query Owner.allOwners
                secured VET
                errors
                test allOwners
                query Owner.countAllOwners
                model Owner
                request OwnerApi.AllOwnersRequest
                response list OwnerApi.AllOwnersResponse
                get /owners/all-owners
            ]

            forAddress read[
                paged
                query Owner.forAddress
                response list EnrichedOwnerDTO
                secured VET
                errors
                test forAddress
                query Owner.countForAddress
                model Owner
                request OwnerApi.ForAddressRequest
                get /owners/for-address
            ]

            ownersWithPets read[
                query Owner.ownersWithPets
                response list EnrichedOwnerDTO
                secured VET
                errors
                test ownersWithPets
                model Owner
                get /owners/owners-with-pets
            ]

            ownersPets read[
                query Owner.ownersPets
                response list OwnerApi.OwnersPetsResponse
                get /owners/:ownerId/pets
                secured VET
                errors
                test ownersPets
                model Owner
                request OwnerApi.OwnersPetsRequest
            ]

            myPets read[
                query Owner.myPets
                secured OWNER
                response list OwnerApi.MyPetsResponse
                errors
                test myPets
                model Owner
                get /owners/my-pets
            ]

            ownerVets read[
                query Owner.ownerVets
                secured VET
                errors
                test ownerVets
                model Owner
                response list OwnerApi.OwnerVetsResponse
                get /owners/owner-vets
            ]

            EnrichedOwnerDTO dto(
                id integer[max 9223372036854775807]
                email text[email, max 255]
                firstName text[min 1, max 40]
                lastName text[min 1, max 60]
            )

            ReadOwnersRequest dto(
                id integer[max 9223372036854775807]
            )

            ReadOwnersResponse dto(
                id integer[max 9223372036854775807]
                userId integer[max 9223372036854775807]
                address optional text[min 5, max 100]
                city optional text[min 2, max 50]
                telephone optional text[min 5, max 15]
            )

            CreateOwnersRequest dto(
                userId integer[max 9223372036854775807]
                address optional text[min 5, max 100]
                city optional text[min 2, max 50]
                telephone optional text[min 5, max 15]
            )

            CreateOwnersResponse dto(
                id integer[max 9223372036854775807]
                userId integer[max 9223372036854775807]
                address optional text[min 5, max 100]
                city optional text[min 2, max 50]
                telephone optional text[min 5, max 15]
            )

            UpdateOwnersRequest dto(
                id integer[max 9223372036854775807]
                userId integer[max 9223372036854775807]
                address optional text[min 5, max 100]
                city optional text[min 2, max 50]
                telephone optional text[min 5, max 15]
            )

            UpdateOwnersResponse dto(
                id integer[max 9223372036854775807]
                userId integer[max 9223372036854775807]
                address optional text[min 5, max 100]
                city optional text[min 2, max 50]
                telephone optional text[min 5, max 15]
            )

            DeleteOwnersRequest dto(
                id integer[max 9223372036854775807]
            )

            AllOwnersRequest dto(
                drop integer[min 0]
                take integer[min 0]
            )

            AllOwnersResponse dto(
                id integer[max 9223372036854775807]
                userId integer[max 9223372036854775807]
                address optional text[min 5, max 100]
                city optional text[min 2, max 50]
                telephone optional text[min 5, max 15]
            )

            ForAddressRequest dto(
                address optional optional text[min 5, max 100]
                drop integer[min 0]
                take integer[min 0]
            )

            OwnersPetsResponse dto(
                id integer[max 9223372036854775807]
                ownerId integer[max 9223372036854775807]
                name text[min 2, max 40]
            )

            OwnersPetsRequest dto(
                ownerId integer[max 9223372036854775807]
            )

            MyPetsResponse dto(
                id integer[max 9223372036854775807]
                name text[min 2, max 40]
                birthday date
                petType PetType
                vaccinated boolean
            )

            OwnerVetsResponse dto(
                id integer[max 9223372036854775807]
                userId integer[max 9223372036854775807]
                address optional text[min 5, max 100]
                city optional text[min 2, max 50]
                telephone optional text[min 5, max 15]
                userFirstName text[min 1, max 40]
                userLastName text[min 1, max 60]
                userEmail text[email, max 255]
                userBirthday date
                userActive boolean
                userRole UserRole
            )
        )

        VetApi api[secured ADMIN, rest /vets](

            readVet read[
                secured ADMIN
                model Vet
                query Vet.findById
                errors
                test readVet
                request VetApi.ReadVetRequest
                response VetApi.ReadVetResponse
                get /vets/read-vet
            ]

            createVet create[
                secured ADMIN
                model Vet
                query Vet.findById
                errors
                test createVet
                request VetApi.CreateVetRequest
                response VetApi.CreateVetResponse
                post /vets/create-vet
            ]

            updateVet update[
                secured ADMIN
                model Vet
                query Vet.findById
                errors
                test updateVet
                request VetApi.UpdateVetRequest
                response VetApi.UpdateVetResponse
                put /vets/update-vet
            ]

            deleteVet delete[
                secured ADMIN
                query Vet.findById
                errors
                test deleteVet
                model Vet
                request VetApi.DeleteVetRequest
                delete /vets/delete-vet
            ]

            vetsWithSpecialties read[
                query Vet.vetsWithSpecialties
                response list VetWithSpecialtiesDTO
                secured ADMIN
                errors
                test vetsWithSpecialties
                model Vet
                get /vets/vets-with-specialties
            ]

            vetInfo read[
                query Vet.vetInfo
                response list VetWithSpecialtiesDTO
                get /vets/vet/info/:id
                secured ADMIN
                errors
                test vetInfo
                model Vet
                request VetApi.VetInfoRequest
            ]

            VetWithSpecialtiesDTO dto(
                firstName text[min 1, max 40]
                lastName text[min 1, max 60]
                specialties list text[min 3, max 50]
            )

            ReadVetRequest dto(
                id integer[max 9223372036854775807]
            )

            ReadVetResponse dto(
                id integer[max 9223372036854775807]
                userId integer[max 9223372036854775807]
                image FileApi.FileDTO
            )

            CreateVetRequest dto(
                userId integer[max 9223372036854775807]
                image FileApi.FileDTOuserId integer[max 9223372036854775807]
            )

            CreateVetResponse dto(
                id integer[max 9223372036854775807]
                userId integer[max 9223372036854775807]
                image FileApi.FileDTO
            )

            UpdateVetRequest dto(
                id integer[max 9223372036854775807]
                userId integer[max 9223372036854775807]
                image FileApi.FileDTO
                userId integer[max 9223372036854775807]
            )

            UpdateVetResponse dto(
                id integer[max 9223372036854775807]
                userId integer[max 9223372036854775807]
                image FileApi.FileDTO
            )

            DeleteVetRequest dto(
                id integer[max 9223372036854775807]
            )

            VetInfoRequest dto(
                id integer[max 9223372036854775807]
            )
        )

        PetApi api[secured VET, rest /pets](

            readPet read[
                secured VET
                model Pet
                query Pet.findById
                errors
                test readPet
                request PetApi.ReadPetRequest
                response PetApi.ReadPetResponse
                get /pets/read-pet
            ]

            createPet create[
                secured VET
                model Pet
                query Pet.findById
                errors
                test createPet
                request PetApi.CreatePetRequest
                response PetApi.CreatePetResponse
                post /pets/create-pet
            ]

            updatePet update[
                secured VET
                model Pet
                query Pet.findById
                errors
                test updatePet
                request PetApi.UpdatePetRequest
                response PetApi.UpdatePetResponse
                put /pets/update-pet
            ]

            deletePet delete[
                secured VET
                query Pet.findById
                errors
                test deletePet
                model Pet
                request PetApi.DeletePetRequest
                delete /pets/delete-pet
            ]

            pets read[
                paged
                query Pet.pets
                response list PetApi.PetsResponse
                secured VET
                errors
                test pets
                query Pet.countPets
                model Pet
                request PetApi.PetsRequest
                get /pets/pets
            ]

            petsByType read[
                query Pet.petsByType
                response list PetApi.PetsByTypeResponse
                secured VET
                errors
                test petsByType
                model Pet
                request PetApi.PetsByTypeRequest
                get /pets/pets-by-type
            ]

            ReadPetRequest dto(
                id integer[max 9223372036854775807]
            )

            ReadPetResponse dto(
                id integer[max 9223372036854775807]
                ownerId integer[max 9223372036854775807]
                name text[min 2, max 40]
                birthday date
                petType PetType
                vaccinated boolean
            )

            CreatePetRequest dto(
                ownerId integer[max 9223372036854775807]
                name text[min 2, max 40]
                birthday date
                petType PetType
                vaccinated boolean
            )

            CreatePetResponse dto(
                id integer[max 9223372036854775807]
                ownerId integer[max 9223372036854775807]
                name text[min 2, max 40]
                birthday date
                petType PetType
                vaccinated boolean
            )

            UpdatePetRequest dto(
                id integer[max 9223372036854775807]
                ownerId integer[max 9223372036854775807]
                name text[min 2, max 40]
                birthday date
                petType PetType
                vaccinated boolean
            )

            UpdatePetResponse dto(
                id integer[max 9223372036854775807]
                ownerId integer[max 9223372036854775807]
                name text[min 2, max 40]
                birthday date
                petType PetType
                vaccinated boolean
            )

            DeletePetRequest dto(
                id integer[max 9223372036854775807]
            )

            PetsResponse dto(
                id integer[max 9223372036854775807]
                name text[min 2, max 40]
                petType PetType
                ownerLastName text[min 1, max 60]
            )

            PetsRequest dto(
                drop integer[min 0]
                take integer[min 0]
            )

            PetsByTypeResponse dto(
                id integer[max 9223372036854775807]
                name text[min 2, max 40]
            )

            PetsByTypeRequest dto(
                petType PetType
            )
        )

        VisitApi api[secured VET, rest /visits](

            readVisit read[
                secured VET
                model Visit
                query Visit.findById
                errors
                test readVisit
                request VisitApi.ReadVisitRequest
                response VisitApi.ReadVisitResponse
                get /visits/read-visit
            ]

            createVisit create[
                secured VET
                model Visit
                query Visit.findById
                errors
                test createVisit
                request VisitApi.CreateVisitRequest
                response VisitApi.CreateVisitResponse
                post /visits/create-visit
            ]

            updateVisit update[
                secured VET
                model Visit
                query Visit.findById
                errors
                test updateVisit
                request VisitApi.UpdateVisitRequest
                response VisitApi.UpdateVisitResponse
                put /visits/update-visit
            ]

            deleteVisit delete[
                secured VET
                query Visit.findById
                errors
                test deleteVisit
                model Visit
                request VisitApi.DeleteVisitRequest
                delete /visits/delete-visit
            ]

            visitsByVet read[
                paged
                query Visit.visitsByVet
                response list VisitDTO
                secured VET
                errors
                test visitsByVet
                query Visit.countVisitsByVet
                model Visit
                request VisitApi.VisitsByVetRequest
                get /visits/visits-by-vet
            ]

            visitsByPet read[
                paged
                query Visit.visitsByPet
                response list VisitDTO
                secured VET
                errors
                test visitsByPet
                query Visit.countVisitsByPet
                model Visit
                request VisitApi.VisitsByPetRequest
                get /visits/visits-by-pet
            ]

            scheduledVisits read[
                paged
                query Visit.scheduledVisits
                response list VisitDTO
                secured VET
                errors
                test scheduledVisits
                query Visit.countScheduledVisits
                model Visit
                request VisitApi.ScheduledVisitsRequest
                get /visits/scheduled-visits
            ]

            visitsForOwner read[
                paged
                secured OWNER
                query Visit.visitsForOwner
                response list VisitDTO
                errors
                test visitsForOwner
                query Visit.countVisitsForOwner
                model Visit
                request VisitApi.VisitsForOwnerRequest
                get /visits/visits-for-owner
            ]

            VisitDTO dto(
                visitNumber integer
                description optional text[max 1024]
                scheduled boolean
                name text[min 2, max 40]
                petType PetType
                firstName text[min 1, max 40]
                lastName text[min 1, max 60]
            )

            ReadVisitRequest dto(
                id integer[max 9223372036854775807]
            )

            ReadVisitResponse dto(
                id integer[max 9223372036854775807]
                vetId integer[max 9223372036854775807]
                petId integer[max 9223372036854775807]
                visitNumber integer
                timestamp datetime
                petWeight optional decimal[precision 24, scale 8]
                description optional text[max 1024]
                scheduled boolean
            )

            CreateVisitRequest dto(
                vetId integer[max 9223372036854775807]
                petId integer[max 9223372036854775807]
                visitNumber integer
                timestamp datetime
                petWeight optional decimal[precision 24, scale 8]
                description optional text[max 1024]
                scheduled boolean
            )

            CreateVisitResponse dto(
                id integer[max 9223372036854775807]
                vetId integer[max 9223372036854775807]
                petId integer[max 9223372036854775807]
                visitNumber integer
                timestamp datetime
                petWeight optional decimal[precision 24, scale 8]
                description optional text[max 1024]
                scheduled boolean
            )

            UpdateVisitRequest dto(
                id integer[max 9223372036854775807]
                vetId integer[max 9223372036854775807]
                petId integer[max 9223372036854775807]
                visitNumber integer
                timestamp datetime
                petWeight optional decimal[precision 24, scale 8]
                description optional text[max 1024]
                scheduled boolean
            )

            UpdateVisitResponse dto(
                id integer[max 9223372036854775807]
                vetId integer[max 9223372036854775807]
                petId integer[max 9223372036854775807]
                visitNumber integer
                timestamp datetime
                petWeight optional decimal[precision 24, scale 8]
                description optional text[max 1024]
                scheduled boolean
            )

            DeleteVisitRequest dto(
                id integer[max 9223372036854775807]
            )

            VisitsByVetRequest dto(
                vetId integer[max 9223372036854775807]
                drop integer[min 0]
                take integer[min 0]
            )

            VisitsByPetRequest dto(
                petId integer[max 9223372036854775807]
                drop integer[min 0]
                take integer[min 0]
            )

            ScheduledVisitsRequest dto(
                drop integer[min 0]
                take integer[min 0]
            )

            VisitsForOwnerRequest dto(
                drop integer[min 0]
                take integer[min 0]
            )
        )

        accessTokenValidityInSeconds integer[production 300, test 300]

        refreshTokenValidityInSeconds integer[production 3600, test 3600]

        accessTokenIsExpired unauthorized

        refreshTokenIsExpired unauthorized

        Tenant model[type mysql, unique(identifier)](
            id integer[primarykey, max 9223372036854775807]
            identifier text[unique, max 255]
            findAll select(Tenant) from Tenant as Tenant
                 order by Tenant.id asc
            countAll count
                 from Tenant as Tenant
            findById select(Tenant) from Tenant as Tenant
                 where Tenant.id == id
                 order by Tenant.id asc
            deleteById delete
                 from Tenant as Tenant
                 where Tenant.id == id
            findByIdentifier select(Tenant) from Tenant as Tenant
                 where Tenant.identifier == identifier
                 order by Tenant.id asc
        )

        UserRole enum(
            NONE NONE
            SUPER_ADMIN SUPER_ADMIN
            ADMIN ADMIN
            VET VET
            OWNER OWNER
        )

        File embedded(
            path text[max 255]
        )

        FileApi api(

            FileDTO dto(
                path text[max 255]
            )

            FileUploadDTO dto(
                fileName text[max 255]
                base64 text[sensitive, max 255]
            )

            findFile find[
                request FileApi.FindFileRequest
                get /file/:key/:fileName
                errors
                test findFile
            ]

            FindFileRequest dto(
                key text[max 255]
                fileName text[max 255]
            )
        )

        DataVersion model[type mysql](
            id integer[primarykey, max 9223372036854775807]
            major integer[min 0]
            minor integer[min 0]
            revision integer[min 0]
            number integer[min 0]
            time datetime
            lock boolean
            lockTime datetime
            findAll select(DataVersion) from DataVersion as DataVersion
                 order by DataVersion.id asc
            countAll count
                 from DataVersion as DataVersion
            findById select(DataVersion) from DataVersion as DataVersion
                 where DataVersion.id == id
                 order by DataVersion.id asc
            deleteById delete
                 from DataVersion as DataVersion
                 where DataVersion.id == id
            findByMajor select(DataVersion) from DataVersion as DataVersion
                 where DataVersion.major == major
                 order by DataVersion.id asc
            findByMinor select(DataVersion) from DataVersion as DataVersion
                 where DataVersion.minor == minor
                 order by DataVersion.id asc
            findByRevision select(DataVersion) from DataVersion as DataVersion
                 where DataVersion.revision == revision
                 order by DataVersion.id asc
            findByNumber select(DataVersion) from DataVersion as DataVersion
                 where DataVersion.number == number
                 order by DataVersion.id asc
            findByTime select(DataVersion) from DataVersion as DataVersion
                 where DataVersion.time == time
                 order by DataVersion.id asc
            findByLock select(DataVersion) from DataVersion as DataVersion
                 where DataVersion.lock == lock
                 order by DataVersion.id asc
            findByLockTime select(DataVersion) from DataVersion as DataVersion
                 where DataVersion.lockTime == lockTime
                 order by DataVersion.id asc
        )

        DataProcessorLog model[unique(major, minor, revision, number), type mysql](
            id integer[primarykey, max 9223372036854775807]
            major integer[min 0]
            minor integer[min 0]
            revision integer[min 0]
            number integer[min 0]
            description text[min 0, max 255]
            started datetime
            completed optional datetime
            findAll select(DataProcessorLog) from DataProcessorLog as DataProcessorLog
                 order by DataProcessorLog.id asc
            countAll count
                 from DataProcessorLog as DataProcessorLog
            findById select(DataProcessorLog) from DataProcessorLog as DataProcessorLog
                 where DataProcessorLog.id == id
                 order by DataProcessorLog.id asc
            deleteById delete
                 from DataProcessorLog as DataProcessorLog
                 where DataProcessorLog.id == id
            findByMajor select(DataProcessorLog) from DataProcessorLog as DataProcessorLog
                 where DataProcessorLog.major == major
                 order by DataProcessorLog.id asc
            findByMinor select(DataProcessorLog) from DataProcessorLog as DataProcessorLog
                 where DataProcessorLog.minor == minor
                 order by DataProcessorLog.id asc
            findByRevision select(DataProcessorLog) from DataProcessorLog as DataProcessorLog
                 where DataProcessorLog.revision == revision
                 order by DataProcessorLog.id asc
            findByNumber select(DataProcessorLog) from DataProcessorLog as DataProcessorLog
                 where DataProcessorLog.number == number
                 order by DataProcessorLog.id asc
            findByDescription select(DataProcessorLog) from DataProcessorLog as DataProcessorLog
                 where DataProcessorLog.description == description
                 order by DataProcessorLog.id asc
            findByStarted select(DataProcessorLog) from DataProcessorLog as DataProcessorLog
                 where DataProcessorLog.started == started
                 order by DataProcessorLog.id asc
            findByCompleted select(DataProcessorLog) from DataProcessorLog as DataProcessorLog
                 where DataProcessorLog.completed == completed
                 order by DataProcessorLog.id asc
            findByCompletedMandatory select(DataProcessorLog) from DataProcessorLog as DataProcessorLog
                 where mandatory DataProcessorLog.completed == completed
                 order by DataProcessorLog.id asc
            findByMajorAndMinorAndRevisionAndNumber select(DataProcessorLog) from DataProcessorLog as DataProcessorLog
                 where DataProcessorLog.major == major and DataProcessorLog.minor == minor and DataProcessorLog.revision == revision and DataProcessorLog.number == number
                 order by DataProcessorLog.id asc
        )

        UserHistory model[type mysql](
            id integer[primarykey, max 9223372036854775807]
            correlationId optional text[max 255]
            entityId integer[max 9223372036854775807]
            reference optional User[manyToOne userHistory]
            changeTime datetime
            previous optional UserHistory[manyToOne userHistory]
            firstName optional text[min 1, max 40]
            lastName optional text[min 1, max 60]
            email optional text[email, max 255]
            birthday optional date
            active optional boolean
            role optional UserRole
            findAllHistoriesOfEntities select(UserHistory) from UserHistory as UserHistory
                 where mandatory UserHistory.reference.id in referenceId
                 order by UserHistory.id asc
            findAll select(UserHistory) from UserHistory as UserHistory
                 order by UserHistory.id asc
            countAll count
                 from UserHistory as UserHistory
            findById select(UserHistory) from UserHistory as UserHistory
                 where UserHistory.id == id
                 order by UserHistory.id asc
            deleteById delete
                 from UserHistory as UserHistory
                 where UserHistory.id == id
            findByCorrelationId select(UserHistory) from UserHistory as UserHistory
                 where UserHistory.correlationId == correlationId
                 order by UserHistory.id asc
            findByCorrelationIdMandatory select(UserHistory) from UserHistory as UserHistory
                 where mandatory UserHistory.correlationId == correlationId
                 order by UserHistory.id asc
            findByEntityId select(UserHistory) from UserHistory as UserHistory
                 where UserHistory.entityId == entityId
                 order by UserHistory.id asc
            findByChangeTime select(UserHistory) from UserHistory as UserHistory
                 where UserHistory.changeTime == changeTime
                 order by UserHistory.id asc
            findByFirstName select(UserHistory) from UserHistory as UserHistory
                 where UserHistory.firstName == firstName
                 order by UserHistory.id asc
            findByFirstNameMandatory select(UserHistory) from UserHistory as UserHistory
                 where mandatory UserHistory.firstName == firstName
                 order by UserHistory.id asc
            findByLastName select(UserHistory) from UserHistory as UserHistory
                 where UserHistory.lastName == lastName
                 order by UserHistory.id asc
            findByLastNameMandatory select(UserHistory) from UserHistory as UserHistory
                 where mandatory UserHistory.lastName == lastName
                 order by UserHistory.id asc
            findByEmail select(UserHistory) from UserHistory as UserHistory
                 where UserHistory.email == email
                 order by UserHistory.id asc
            findByEmailMandatory select(UserHistory) from UserHistory as UserHistory
                 where mandatory UserHistory.email == email
                 order by UserHistory.id asc
            findByBirthday select(UserHistory) from UserHistory as UserHistory
                 where UserHistory.birthday == birthday
                 order by UserHistory.id asc
            findByBirthdayMandatory select(UserHistory) from UserHistory as UserHistory
                 where mandatory UserHistory.birthday == birthday
                 order by UserHistory.id asc
            findByActive select(UserHistory) from UserHistory as UserHistory
                 where UserHistory.active == active
                 order by UserHistory.id asc
            findByActiveMandatory select(UserHistory) from UserHistory as UserHistory
                 where mandatory UserHistory.active == active
                 order by UserHistory.id asc
            findByRole select(UserHistory) from UserHistory as UserHistory
                 where UserHistory.role == role
                 order by UserHistory.id asc
            findByRoleMandatory select(UserHistory) from UserHistory as UserHistory
                 where mandatory UserHistory.role == role
                 order by UserHistory.id asc
        )

        PetHistory model[type mysql, index(petType)](
            id integer[primarykey, max 9223372036854775807]
            correlationId optional text[max 255]
            entityId integer[max 9223372036854775807]
            reference optional Pet[manyToOne petHistory]
            changeTime datetime
            previous optional PetHistory[manyToOne petHistory]
            ownerId optional integer[max 9223372036854775807]
            name optional text[min 2, max 40]
            birthday optional date
            petType optional PetType[indexed]
            vaccinated optional boolean
            findAllHistoriesOfEntities select(PetHistory) from PetHistory as PetHistory
                 where mandatory PetHistory.reference.id in referenceId
                 order by PetHistory.id asc
            findAll select(PetHistory) from PetHistory as PetHistory
                 order by PetHistory.id asc
            countAll count
                 from PetHistory as PetHistory
            findById select(PetHistory) from PetHistory as PetHistory
                 where PetHistory.id == id
                 order by PetHistory.id asc
            deleteById delete
                 from PetHistory as PetHistory
                 where PetHistory.id == id
            findByCorrelationId select(PetHistory) from PetHistory as PetHistory
                 where PetHistory.correlationId == correlationId
                 order by PetHistory.id asc
            findByCorrelationIdMandatory select(PetHistory) from PetHistory as PetHistory
                 where mandatory PetHistory.correlationId == correlationId
                 order by PetHistory.id asc
            findByEntityId select(PetHistory) from PetHistory as PetHistory
                 where PetHistory.entityId == entityId
                 order by PetHistory.id asc
            findByChangeTime select(PetHistory) from PetHistory as PetHistory
                 where PetHistory.changeTime == changeTime
                 order by PetHistory.id asc
            findByOwnerId select(PetHistory) from PetHistory as PetHistory
                 where PetHistory.ownerId == ownerId
                 order by PetHistory.id asc
            findByOwnerIdMandatory select(PetHistory) from PetHistory as PetHistory
                 where mandatory PetHistory.ownerId == ownerId
                 order by PetHistory.id asc
            findByName select(PetHistory) from PetHistory as PetHistory
                 where PetHistory.name == name
                 order by PetHistory.id asc
            findByNameMandatory select(PetHistory) from PetHistory as PetHistory
                 where mandatory PetHistory.name == name
                 order by PetHistory.id asc
            findByBirthday select(PetHistory) from PetHistory as PetHistory
                 where PetHistory.birthday == birthday
                 order by PetHistory.id asc
            findByBirthdayMandatory select(PetHistory) from PetHistory as PetHistory
                 where mandatory PetHistory.birthday == birthday
                 order by PetHistory.id asc
            findByPetType select(PetHistory) from PetHistory as PetHistory
                 where PetHistory.petType == petType
                 order by PetHistory.id asc
            findByPetTypeMandatory select(PetHistory) from PetHistory as PetHistory
                 where mandatory PetHistory.petType == petType
                 order by PetHistory.id asc
            findByVaccinated select(PetHistory) from PetHistory as PetHistory
                 where PetHistory.vaccinated == vaccinated
                 order by PetHistory.id asc
            findByVaccinatedMandatory select(PetHistory) from PetHistory as PetHistory
                 where mandatory PetHistory.vaccinated == vaccinated
                 order by PetHistory.id asc
        )

        VetVetSpecialty model[type mysql, unique(vet, vetSpecialty)](
            id integer[primarykey, max 9223372036854775807]
            vet Vet[manyToOne vetVetSpecialty]
            vetSpecialty VetSpecialty[manyToOne vetVetSpecialty]
        )

        VetSpecialtyVet model[type mysql, unique(vetSpecialty, vet)](
            id integer[primarykey, max 9223372036854775807]
            vetSpecialty VetSpecialty[manyToOne vetSpecialtyVet]
            vet Vet[manyToOne vetSpecialtyVet]
        )
    )
)