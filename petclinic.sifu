PetClinic project[
    url www.petclinic.com
    namespace co.aleksa
    version 1 . 0 . 0 . 0
    environments(prod)
    developer(azrnic)
](
    administration server[
        owners(azrnic)
        template springboot(tests fabut)
        security(
            principal User
            role UserRole
            defaultRole NONE
            type email
            signIn[
                response dto(
                    User.email
                    User.role
                    User.firstName
                    User.lastName
                    tenants list dto(
                        Tenant.identifier
                        Tenant.name
                        TenantUser.accessLevel
                    )
                )
            ]
        )
        path /admin
    ](
        UserRole enum(
            NONE
            SUPER_ADMIN
            ADMIN
            VET
            OWNER
        )

        User model[auditable](
            firstName text[min 1, max 40, searchable]
            lastName text[min 1, max 60]
            birthday date
            active boolean
            userTenants list TenantUser[oneToMany user]
        )

        Tenant model(
            name text
            identifier text[unique]
            tenantUsers list TenantUser[oneToMany tenant]
        )

        TenantAccessLevel enum(
            ADMIN
            VET
            OWNER
        )

        TenantUser model[unique(user, tenant)](
            user User
            tenant Tenant
            accessLevel TenantAccessLevel
        )

        TenantApi api[secured SUPER_ADMIN, rest /tenants](

            createTenant create[
                model Tenant
                request dto(
                    Tenant.identifier
                    Tenant.name
                )
                response dto(
                    Tenant.identifier
                )
            ]

            updateTenant update[
                model Tenant
                request dto(
                    Tenant.name
                )
            ]

            readTenant read[
                select from Tenant where Tenant.identifier == identifier
            ]

            searchTenants read[
                select from Tenant where optional Tenant.name like name
            ]
        )

        UserApi api[secured ADMIN, rest /users](

            user crud[model User]

            nonAdmins read[
                select from User where User.role != ADMIN
                rest
            ]

            admins read[
                select from User where User.role == ADMIN
                rest
            ]

            activateUser update[
                model User
                request UserActivationDTO
                rest /activate
            ]

            getActiveUser read[
                select from User where User.active == true and User.id == userId
                rest /active/:userId
            ]

            createUserOnTenant create[
                model TenantUser
                request dto(
                    tenant Tenant.identifier
                    User.email
                    User.role
                )
            ]

            removeUserFromTenant update[
                request dto(
                    TenantUser.id
                )
            ]

            UserActivationDTO dto(
                User.id
                User.active[default true]
            )
        )
    )

    backend server[
        owners(azrnic)
        template springboot(tests fabut)
        security(
            principal User
        )
        path /pet-clinic
        file storage fs
        multitenancy
    ](
        PetType enum(
            DOG
            CAT
            BIRD
            FISH
            OTHER
        )

        User model[auditable](
            firstName text[min 1, max 40, searchable]
            lastName text[min 1, max 60]
            email text[email]
            birthday date
            active boolean
            vets list Vet[oneToMany Vet]
        )

        Vet model(
            user User[oneToOne, unique]
            specialties list VetSpecialty[manyToMany]
            image file
        )

        Owner model(
            user User[oneToOne, unique]
            address optional text[min 5, max 100]
            city optional text[min 2, max 50]
            telephone optional text[min 5, max 15]
            pets list Pet[oneToMany owner]
        )

        Pet model[auditable](
            owner Owner
            name text[min 2, max 40]
            birthday date
            petType PetType
            vaccinated boolean
        )

        VetSpecialty model(
            name text[unique, min 3, max 50]
            description text[min 1, max 1024]
            vets list Vet[manyToMany]
        )

        Visit model(
            vet Vet
            pet Pet
            visitNumber integer
            timestamp datetime
            petWeight optional decimal
            description optional text[max 1024]
            scheduled boolean[default false]
        )

        OwnerApi api[secured VET, rest /owners](
            owners crud[model Owner]

            allOwners read[
                paged
                select from Owner
            ]

            forAddress read[
                paged
                select from Owner
                    join User on Owner.user
                    where optional Owner.address like address
                response list EnrichedOwnerDTO
            ]

            ownersWithPets read[
                select from Owner
                    join Pet as pet with Owner on Owner.pets
                    join User on Owner.user
                response list EnrichedOwnerDTO
            ]

            ownersPets read[
                select from Owner
                    join Pet with Owner on Owner.pets
                    where Owner.id == ownerId
                response list dto(
                    Pet.id
                    ownerId Owner.id
                    Pet.name
                )
                rest /:ownerId/pets
            ]

            myPets read[
                select from Owner as owner
                    join Pet with owner on owner.pets
                    join User with owner on owner.user
                    where owner.user == principal
                secured OWNER
                response list dto(
                    Pet.id
                    Pet.name
                    Pet.birthday
                    Pet.petType
                    Pet.vaccinated
                )
            ]

            ownerVets read[
                select from Owner
                    join User on Owner.user
                    where User.role == VET
            ]

            EnrichedOwnerDTO dto(
                Owner.id
                User.email
                User.firstName
                User.lastName
            )
        )

        VetApi api[secured ADMIN, rest /vets](
            vet crud[model Vet]

            vetsWithSpecialties read[
                select (vet, list VetSpecialty) from Vet as vet
                    join User on vet.user
                    join VetSpecialty with vet on vet.specialties
                    group by vet
                response list VetWithSpecialtiesDTO
            ]

            vetInfo read[
                select (vet, list VetSpecialty) from Vet as vet
                    join User on vet.user
                    join VetSpecialty with vet on vet.specialties
                    where vet.id == id
                    group by vet
                response list VetWithSpecialtiesDTO
                rest /vet/info/:id
            ]

            VetWithSpecialtiesDTO dto(
                User.firstName
                User.lastName
                specialties list VetSpecialty.name
            )
        )

        PetApi api[secured VET, rest /pets](
            pet crud[model Pet]

            pets read[
                paged
                select from Pet
                    join Owner on Pet.owner
                    join User on Owner.user
                response list dto(
                    Pet.id
                    Pet.name
                    Pet.petType
                    ownerLastName User.lastName
                )
            ]

            petsByType read[
                select from Pet
                    where Pet.petType == petType
                response list dto(
                    Pet.id
                    Pet.name
                )
            ]
        )

        VisitApi api[secured VET, rest /visits](
            visit crud[model Visit]

            visitsByVet read[
                paged
                select from Visit
                    join Vet on Visit.vet
                    join Pet on Visit.pet
                    where Vet.id == vetId
                response list VisitDTO
            ]

            visitsByPet read[
                paged
                select from Visit
                    join Pet as pet on Visit.pet
                    join Vet on Visit.vet
                    join Owner as owner on pet.owner
                    join User on owner.user
                    where pet.id == petId
                response list VisitDTO
            ]

            scheduledVisits read[
                paged
                select from Visit
                    join Pet as pet on Visit.pet
                    join Vet on Visit.vet
                    join Owner on pet.owner
                    join User on Owner.user
                    where Vet.user == principal and Visit.scheduled == true
                response list VisitDTO
            ]

            visitsForOwner read[
                paged
                secured OWNER
                select from Visit
                    join Pet as pet on Visit.pet
                    join Vet as vet on Visit.vet
                    join User on vet.user
                    join Owner on pet.owner
                    where Owner.user == principal
                response list VisitDTO
            ]

            VisitDTO dto(
                Visit.visitNumber
                Visit.description
                Visit.scheduled
                Pet.name
                Pet.petType
                User.firstName
                User.lastName
            )
        )
    )

    website client[
        owners(azrnic)
        template angular
        path /petclinic
        connectedTo(
            backend
        )
        home(
            welcomePage
        )
    ](

        publicHeader container(
            signInButton button {
#                on click {
#                    goto signInPage
#                }
            }
            signUpButton button {
#                on click {
#                    goto signUpPage
#                }
            }
        )

        privateHeader container(
            userInfo label
        )

        footer container(
            about button {
                on click {
                    goto aboutPage
                }
            }
        )

        welcomePage page(
            header publicHeader
            welcome label
            footer footer
        )

        aboutPage page[path /about](
            header publicHeader
            footer footer
        )

        petsPage page[path /private/pets, secured(VET)](
            header privateHeader
            petsList list[input(0, 10), load backend.PetApi.pets] {
                on selected {
                    goto petUpdatePage(item.id)
                }
            }
            addPet button {
                on click {
                    goto petCreatePage
                }
            }
            footer footer
        )

        petCreatePage page[path /private/pet/new, secured(VET)](
            header privateHeader
            petCreateForm form[input(none), submit backend.PetApi.createPet] {
                on success {
                    goto petsPage
                }
            }
            footer footer
        )

        petUpdateForm form[load readPet, submit backend.PetApi.updatePet](
            deleteButton button {
                on click {
                    call deletePet(params.id) {
                        on success {
                            goto petsPage
                        }
                    }
                }
            }
        ) {
            on success {
                goto petsPage
            }
        }

        petUpdatePage page[path /private/pet/:id, params(id integer), secured(VET)](
            header privateHeader
            form petUpdateForm[input(params.id)]
            footer footer
        )
    )

    adminPortal client[
        template angular
        path /admin
        connectedTo(
            backend
        )
        owners(azrnic)
    ]
)