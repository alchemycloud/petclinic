PetClinic project[
    url www.petclinic.com
    namespace co.drytools
    version 1 . 0 . 0 . 0
    environments(prod)
    developer(duskovesin)
](

    backend server[
        owners(duskovesin)
        template springboot(tests fabut)
        security(
            principal User
            role UserRole
            defaultRole VET
            adminRole ADMIN
            type(email)
        )
        path /pet-server
        default model type mysql
        file storage fs
    ](

        adminEmail text[production "admin_production@email.com", test "admin_test@email.com"]

        InvalidPetData dataConstraint

        InvalidUser badRequest

        InvalidPetOwner badRequest

        UserRole enum(
            VET
            ADMIN
            OWNER
        )

        PetType enum(
            DOG
            CAT
            BIRD
            FISH
            OTHER
        )

        User model[auditable](
            firstName text[min 1, max 40, searchable]
            lastName text[min 1, max 60]
            birthdate date
            active boolean
            vets list Vet[oneToMany user]
            adminUsers select from User 
                 where User.role == ADMIN
            findByNameOrLastNameLike select 
                 where User.firstName like firstname or User.lastName like lastname
            filterUsers select 
                 where optional User.email like email and optional User.firstName like first and optional User.lastName like last
            activeUsersVets select from User 
                 join Vet with User on User.vets 
                 where User.role == VET and User.active == true 
                 order by(User.lastName asc)
        )

        Owner model(
            user User[oneToOne, unique]
            address optional text[min 5, max 100]
            city optional text[min 2, max 50]
            telephone optional text[min 5, max 15]
            pets list Pet[oneToMany owner]
            allOwnersPaged select from Owner 
                 drop param 
                 take 20
            findOwnerwithUser select from Owner 
                 join User on Owner.user 
                 where Owner.id == id
            mandatoryAddress select from Owner 
                 where mandatory Owner.address == address
            orderableOwners select 
                 where Owner.city is not null or Owner.telephone is not null 
                 orderable by(Owner.city, Owner.telephone)
            deactivatedOwnerWithPets select from Owner 
                 join Pet with Owner on Owner.pets 
                 join User on Owner.user 
                 where User.active == false and User.role == OWNER
            findOwnerVets select from Owner 
                 join User on Owner.user 
                 where User.role == VET
        )

        Vet model(
            user User[oneToOne, unique]
            image file
        )

        VetSpeciality model(
            name text[unique, min 3, max 50]
            description text[min 1, max 1024]
        )

        VetSpecialities model(
            vet Vet
            speciality VetSpeciality
        )

        Pet model(
            owner Owner[manyToOne]
            name text[min 2, max 40]
            birthdate date
            petType PetType
            vaccinated boolean
            petWithOwnerCount count 
                 
                 left join Owner on Pet.owner
            petWithOwnerForOwner select 
                 left join Owner on Pet.owner 
                 where Pet.owner == owner
        )

        Visit model(
            vet Vet
            pet Pet[manyToOne]
            visitNumber integer
            timestamp datetime
            petWeight optional decimal
            description optional text[max 1024]
            scheduled boolean[default false]
        )

        UserApi api[secured(ADMIN), rest /users](

            user crud[model User]

            users read[
                query User.findAll
                response list dto(
                    User.id
                    User.email
                    User.firstName
                    User.lastName
                )
                secured
                rest /allUsers
            ]

            nonAdmins read[
                select from User 
                     where User.role != ADMIN
                secured(ADMIN, VET)
                rest /nonAdmins
            ]

            adminUsers read[
                query User.adminUsers
                rest /admins
                secured
            ]

            UserResponseDTO dto(
                User.id
                User.email
                User.firstName
                User.lastName
                User.birthdate
                User.active
            )

            UserActivationSimpleDTO dto(
                User.id
                User.active[default true]
            )

            UserDTO dto(
                User.id
                User.email
                User.firstName
                User.lastName
                User.birthdate
                User.active
            )

            setUserActiveStatusSimple update[
                rest /active/simple
                model User
                request UserActivationSimpleDTO
                response UserResponseDTO
            ]

            getActiveUser read[
                rest /user
                request UserDTO
                response UserResponseDTO
            ]
        )

        OwnerApi api[secured](

            owner crud[model Owner, secured(VET), rest]

            allOwners read[
                query Owner.allOwnersPaged
                rest /allOwners
                secured(VET)
            ]

            ownersForAddress read[
                paged
                select from Owner 
                     join User on Owner.user 
                     where optional Owner.address like address
                response list dto(
                    Owner.id
                    userEmail User.email
                    userFirstName User.firstName
                    userLastName User.lastName
                )
                secured(VET)
                rest /owners
            ]

            ownersWithPets read[
                select from Owner 
                     join Pet as pet with Owner on Owner.pets 
                     join User on Owner.user
                response list dto(
                    userFirstName User.firstName
                    userLastName User.lastName
                )
                secured(VET)
                rest /ownersWithPets
            ]

            ownersPets read[
                select from Owner 
                     join Pet with Owner on Owner.pets 
                     join User on Owner.user 
                     where Owner.id == ownerId
                response list dto(
                    petId Pet.id
                    Owner.id
                    petName Pet.name
                )
                secured(VET)
                rest /owner/:ownerId/pets
            ]

            myPets read[
                select from Owner as owner 
                     join Pet as pet with owner on owner.pets 
                     join User with owner on owner.user 
                     where owner.user == principal
                secured(OWNER)
                rest
            ]

            ownerVets read[
                query Owner.findOwnerVets
                secured(VET)
                rest
            ]
        )

        VetApi api[secured(ADMIN), rest](

            vet crud[model Vet, rest]

            VetDTO dto(
                Vet.id
                User.firstName
                User.lastName
            )

            VetWithSpecialtiesDTO dto(
                User.firstName
                User.lastName
                specialties list VetSpeciality.name
            )

            vetsWithSpecialties read[
                rest /vets
                errors(
                    InvalidPetData
                )
                request VetDTO
                response list VetWithSpecialtiesDTO
            ]

            vetInfo read[
                rest /vet/info/:id
                request dto(
                    Vet.id
                )
                response VetWithSpecialtiesDTO
            ]
        )

        PetApi api[secured](

            pet crud[model Pet, secured(VET), rest]

            pets read[
                paged
                select from Pet 
                     join Owner on Pet.owner 
                     join User on Owner.user
                response list dto(
                    Pet.id
                    Pet.name
                    Pet.petType
                    userLastName User.lastName
                )
                secured(VET)
                rest /pets
            ]

            findPetbyType read[
                select from Pet 
                     where Pet.petType == petType
                response list dto(
                    Pet.name
                    Pet.petType
                )
                secured(VET)
                rest
            ]
        )

        VisitApi api[secured(VET), rest /visit](

            visit crud[model Visit, rest]

            vetVisits read[
                paged
                rest
                select from Visit 
                     join Vet on Visit.vet 
                     join Pet on Visit.pet 
                     where Vet.user == user
                response list dto(
                    vetUser Vet.user
                    petName Pet.name
                    Visit.visitNumber
                    Visit.scheduled
                )
            ]

            scheduledVisits read[
                rest /scheduled
                select from Visit 
                     where Visit.description is not null and Visit.scheduled == true
            ]

            myVisits read[
                secured(OWNER)
                rest
                test testName "description"
                test testName2
                select from Visit as visit 
                     join Pet as pet with visit on visit.pet 
                     join Owner as owner with pet on pet.owner 
                     join User with owner on owner.user 
                     where owner.user == userId
            ]
        )
    )

    website client[
        owners(duskovesin)
        template angular
        path /petclinic
        connectedTo(
            backend
        )
        home(
            welcomePage
        )
    ](

        publicHeader container(
            signInButton button {
                on click {
                    goto signInPage
                }
            }
            signUpButton button {
                on click {
                    goto signUpPage
                }
            }
        )

        privateHeader container(
            userInfo label
        )

        footer container(
            about button {
                on click {
                    goto aboutPage
                }
            }
        )

        welcomePage page(
            header publicHeader
            welcome label
            footer footer
        )

        aboutPage page[path /about](
            header publicHeader
            footer footer
        )

        petsPage page[path /private/pets, secured(VET)](
            header privateHeader
            petsList list[input(0, 10), load backend.PetApi.pets] {
                on selected {
                    goto petUpdatePage(item.id)
                }
            }
            addPet button {
                on click {
                    goto petCreatePage
                }
            }
            footer footer
        )

        petCreatePage page[path /private/pet/new, secured(VET)](
            header privateHeader
            petCreateForm form[input(none), submit backend.PetApi.createPet] {
                on success {
                    goto petsPage
                }
            }
            footer footer
        )

        petUpdateForm form[load readPet, submit backend.PetApi.updatePet](
            deleteButton button {
                on click {
                    call deletePet(params.id) {
                        on success {
                            goto petsPage
                        }
                    }
                }
            }
        ) {
            on success {
                goto petsPage
            }
        }

        petUpdatePage page[path /private/pet/:id, params(id integer), secured(VET)](
            header privateHeader
            formdasdas petUpdateForm[input(params.id)]
            footer footer
        )
    )

    adminPortal client[
        template angular
        path /admin
        connectedTo(
            backend
        )
        owners(duskovesin)
    ]
)